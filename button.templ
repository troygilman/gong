package gong

import "net/http"

templ NewButton(opts ...ButtonOption) {
	{{
		c := ButtonConfig{
			method: http.MethodPost,
			swap:   SwapInnerHTML,
		}
		for _, opt := range opts {
			c = opt(c)
		}
	}}
	<button
		if c.method == http.MethodGet {
			hx-get
		}
		if c.method == http.MethodPost {
			hx-post
		}
		if c.method == http.MethodPatch {
			hx-patch
		}
		if c.method == http.MethodDelete {
			hx-delete
		}
		hx-swap={ c.swap }
		if c.target != "" {
			hx-target={ c.target }
		} else {
			hx-target={ "#" + ComponentID(ctx) }
		}
		hx-headers={ ActionHeaders(ctx) }
		hx-include="this"
		if c.classes != nil {
			class={ c.classes }
		}
		{ c.attrs... }
	>
		{ children... }
	</button>
}

type ButtonConfig struct {
	method  string
	swap    string
	headers []string
	attrs   templ.Attributes
	classes templ.CSSClasses
	target  string
}

type ButtonOption func(ButtonConfig) ButtonConfig

func ButtonWithMethod(method string) ButtonOption {
	return func(c ButtonConfig) ButtonConfig {
		c.method = method
		return c
	}
}

func ButtonWithHeaders(headers ...string) ButtonOption {
	return func(c ButtonConfig) ButtonConfig {
		c.headers = headers
		return c
	}
}

func ButtonWithAttrs(attrs templ.Attributes) ButtonOption {
	return func(c ButtonConfig) ButtonConfig {
		c.attrs = attrs
		return c
	}
}

func ButtonWithSwap(swap string) ButtonOption {
	return func(c ButtonConfig) ButtonConfig {
		c.swap = swap
		return c
	}
}

func ButtonWithClasses(classes ...any) ButtonOption {
	return func(c ButtonConfig) ButtonConfig {
		c.classes = templ.Classes(classes...)
		return c
	}
}

func ButtonWithTarget(target string) ButtonOption {
	return func(c ButtonConfig) ButtonConfig {
		c.target = target
		return c
	}
}
