package gong

import (
	"context"
	"fmt"
	"io"
	"net/http"
)

// Button represents an HTMX-powered button component that can trigger actions dynamically.
// It provides a way to create buttons with configurable HTTP methods, CSS classes,
// target elements, and HTMX swap behaviors.
type Button struct {
	method  string
	target  *string
	swap    string
	pushUrl string
	headers []string
	include *string
	attrs   templ.Attributes
}

// NewButton creates a new Button instance with default settings.
// By default, it uses POST method, no swap behavior, and does not push a URL.
func NewButton() Button {
	return Button{
		method:  http.MethodPost,
		swap:    SwapNone,
		pushUrl: "false",
	}
}

// WithMethod sets the HTTP method for the button action.
// Valid methods include POST, PATCH, and DELETE.
// Returns the modified button for method chaining.
func (button Button) WithMethod(method string) Button {
	button.method = method
	return button
}

// WithCSSClasses adds CSS classes to the button element.
// The classes will be applied to the rendered button.
// Returns the modified button for method chaining.
func (button Button) WithAttrs(attrs templ.Attributes) Button {
	button.attrs = attrs
	return button
}

// WithTargetID sets the target ID for the button action.
// This is used to specify the element that will be updated after the button action.
// Returns the modified button for method chaining.
func (button Button) WithTarget(target string) Button {
	button.target = &target
	return button
}

// WithSwap sets the HTMX swap behavior for the button action.
// This determines how the response will be swapped into the DOM.
// Returns the modified button for method chaining.
func (button Button) WithSwap(swap string) Button {
	button.swap = swap
	return button
}

// WithPushUrl sets whether the button action should push a URL to the browser's history.
// Returns the modified button for method chaining.
func (button Button) WithPushUrl(pushUrl bool) Button {
	if pushUrl {
		button.pushUrl = "true"
	} else {
		button.pushUrl = "false"
	}
	return button
}

func (button Button) WithHeaders(headers ...string) Button {
	button.headers = headers
	return button
}

func (button Button) WithInclude(include string) Button {
	button.include = &include
	return button
}

// Render writes the button's HTML representation to the provided writer.
// It handles the rendering of the button with all configured attributes.
// Returns an error if rendering fails.
func (button Button) Render(ctx context.Context, w io.Writer) error {
	return button.component().Render(ctx, w)
}

templ (button Button) component() {
	{{
		headers := append(gongHeaders(ctx, GongRequestTypeAction), button.headers...)
		if button.target == nil {
			target := fmt.Sprintf("#%s", TargetID(ctx, ""))
			button.target = &target
		}
	}}
	<button
		if button.method == http.MethodGet {
			hx-get
		}
		if button.method == http.MethodPost {
			hx-post
		}
		if button.method == http.MethodPatch {
			hx-patch
		}
		if button.method == http.MethodDelete {
			hx-delete
		}
		hx-swap={ button.swap }
		if button.swap != SwapNone {
			hx-target={ *button.target }
		}
		hx-include="this"
		hx-push-url={ button.pushUrl }
		hx-headers={ buildHeaders(headers) }
		if button.include != nil {
			hx-include={ *button.include }
		}
		{ button.attrs... }
	>
		{ children... }
	</button>
}
