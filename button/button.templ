package button

import (
	"github.com/troygilman/gong"
	"github.com/troygilman/gong/hooks"
	"net/http"
)

templ New(opts ...Option) {
	{{
		c := Config{
			method: http.MethodPost,
			swap:   gong.SwapInnerHTML,
		}
		for _, opt := range opts {
			c = opt(c)
		}
	}}
	<button
		if c.method == http.MethodGet {
			hx-get
		}
		if c.method == http.MethodPost {
			hx-post
		}
		if c.method == http.MethodPatch {
			hx-patch
		}
		if c.method == http.MethodDelete {
			hx-delete
		}
		hx-swap={ c.swap }
		if c.target != "" {
			hx-target={ c.target }
		} else {
			hx-target={ "#" + hooks.ComponentID(ctx) }
		}
		hx-headers={ hooks.ActionHeaders(ctx) }
		hx-include="this"
		if c.classes != nil {
			class={ c.classes }
		}
		{ c.attrs... }
	>
		{ children... }
	</button>
}

type Config struct {
	method  string
	swap    string
	headers []string
	attrs   templ.Attributes
	classes templ.CSSClasses
	target  string
}

type Option func(Config) Config

func WithMethod(method string) Option {
	return func(c Config) Config {
		c.method = method
		return c
	}
}

func WithHeaders(headers ...string) Option {
	return func(c Config) Config {
		c.headers = headers
		return c
	}
}

func WithAttrs(attrs templ.Attributes) Option {
	return func(c Config) Config {
		c.attrs = attrs
		return c
	}
}

func WithSwap(swap string) Option {
	return func(c Config) Config {
		c.swap = swap
		return c
	}
}

func WithClasses(classes ...any) Option {
	return func(c Config) Config {
		c.classes = templ.Classes(classes...)
		return c
	}
}

func WithTarget(target string) Option {
	return func(c Config) Config {
		c.target = target
		return c
	}
}
