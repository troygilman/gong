package click_to_edit

import (
	"github.com/troygilman/gong"
	"github.com/troygilman/gong/button"
	"github.com/troygilman/gong/component"
	"github.com/troygilman/gong/form"
	"github.com/troygilman/gong/hooks"
	"github.com/troygilman/gong/route"
	"github.com/troygilman/gong/target"
	"net/http"
)

func Route() gong.Route {
	return route.New("/", NewUserDetailComponent())
}

type UserDetailComponent struct{}

func NewUserDetailComponent() gong.Component {
	return component.New(UserDetailComponent{})
}

templ (c UserDetailComponent) View() {
	@styles()
	@target.New() {
		@userDetails(defaultUser)
	}
}

templ (c UserDetailComponent) Action() {
	{{
		var user User
		if err := hooks.Bind(ctx, &user); err != nil {
			panic(err)
		}
	}}
	switch hooks.Request(ctx).Method {
		case http.MethodGet:
			if hooks.FormValue(ctx, "view") == "form" {
				@userForm(user)
			} else {
				@userDetails(user)
			}
		case http.MethodPost:
			@userDetails(user)
	}
}

templ userDetails(user User) {
	@form.New(
		form.WithMethod(http.MethodGet),
		form.WithClass("user-card user-details"),
	) {
		<input type="hidden" name="view" value="form"/>
		<div>
			<div><label>First Name: </label>{ user.FirstName }</div>
			<input type="hidden" name="firstName" value={ user.FirstName }/>
		</div>
		<div>
			<div><label>Last Name: </label>{ user.LastName }</div>
			<input type="hidden" name="lastName" value={ user.LastName }/>
		</div>
		<div>
			<div><label>Email: </label>{ user.Email }</div>
			<input type="hidden" name="email" value={ user.Email }/>
		</div>
		<button>
			Click To Edit
		</button>
	}
}

templ userForm(user User) {
	@form.New(form.WithClass("user-card")) {
		<div>
			<label>First Name</label>
			<input type="text" name="firstName" value={ user.FirstName }/>
		</div>
		<div>
			<label>Last Name</label>
			<input type="text" name="lastName" value={ user.LastName }/>
		</div>
		<div>
			<label>Email Address</label>
			<input type="email" name="email" value={ user.Email }/>
		</div>
		<div class="button-row">
			<button>Submit</button>
			@button.New(button.WithMethod(http.MethodGet)) {
				<input type="hidden" name="email" value={ user.Email }/>
				<input type="hidden" name="lastName" value={ user.LastName }/>
				<input type="hidden" name="firstName" value={ user.FirstName }/>
				Cancel
			}
		</div>
	}
}

type User struct {
	FirstName string `form:"firstName"`
	LastName  string `form:"lastName"`
	Email     string `form:"email"`
}

var defaultUser = User{
	FirstName: "Joe",
	LastName:  "Blow",
	Email:     "joe@blow.com",
}

templ styles() {
	<style type="text/css">
		.user-card {
			max-width: 400px;
			margin: 40px auto;
			padding: 32px 24px;
			background: #fff;
			border-radius: 12px;
			box-shadow: 0 4px 24px rgba(0,0,0,0.08);
			border: 1px solid #e5e7eb;
		}
		form > div {
			margin-bottom: 18px;
		}
		label {
			display: block;
			font-weight: 500;
			margin-bottom: 6px;
			color: #1e293b;
		}
		input[type="text"], input[type="email"] {
			width: 100%;
			padding: 8px 12px;
			border: 1px solid #cbd5e1;
			border-radius: 6px;
			font-size: 1rem;
			transition: border-color 0.2s;
			background: #f8fafc;
		}
		input[type="text"]:focus, input[type="email"]:focus {
			border-color: #2563eb;
			outline: none;
			background: #fff;
		}
		button {
			padding: 8px 20px;
			border: none;
			border-radius: 6px;
			background: #2563eb;
			color: #fff;
			font-weight: 600;
			font-size: 1rem;
			cursor: pointer;
			transition: background 0.2s;
			margin-right: 10px;
		}
		button:hover, button:focus {
			background: #1d4ed8;
		}
		.button-row {
		    display: flex;
			flex-direction: row;
		}
		/* Optional: style the details view */
		.user-details label {
			font-weight: 400;
			color: #64748b;
		}
		.user-details div {
			margin-bottom: 12px;
		}
	</style>
}
