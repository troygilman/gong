package main

import (
	"context"
	"fmt"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong/form"
	"github.com/troygilman/gong/hooks"
	"github.com/troygilman/gong/link"
	"github.com/troygilman/gong/target"
	"log"
	"net/http"
	"strconv"
)

type userView struct {
	db *userDatabase
}

func (view userView) Loader(ctx context.Context) any {
	name := hooks.FormValue(ctx, "name")
	user, ok := view.db.Read(name)
	if !ok {
		return nil
	}
	return user
}

templ (view userView) Action() {
	switch hooks.Request(ctx).Method {
		case http.MethodDelete:
			{{
				name := hooks.FormValue(ctx, "name")
				view.db.Delete(name)
			}}
		case http.MethodPatch:
			{{
				log.Println(hooks.PathParam(ctx, "name"))
				name := hooks.FormValue(ctx, "name")
				balance, err := strconv.Atoi(hooks.FormValue(ctx, "balance"))
				if err != nil {
					panic(err)
				}
				view.db.Update(userData{
					name:    name,
					balance: balance,
				})
			}}
			@view.View()
	}
}

templ (view userView) View() {
	{{
	user := hooks.LoaderData[userData](ctx)
	attrs := templ.Attributes{
		"class": boxClassName(),
	}
	}}
	@target.New().WithID(user.name).WithAttrs(attrs) {
		@link.New("/user/" + user.name) {
			{ user.name }
		}
		@form.New(
			form.WithMethod(http.MethodPatch),
			form.WithTargetID(user.name),
			form.WithSwap(gong.SwapOuterHTML),
		) {
			<input type="hidden" name="name" value={ user.name }/>
			<input type="text" name="balance" value={ fmt.Sprintf("%d", user.balance) }/>
			<button type="submit">Update</button>
		}
		@form.New(
			form.WithMethod(http.MethodDelete),
			form.WithTargetID(user.name),
			form.WithSwap(gong.SwapOuterHTML),
		) {
			<input type="hidden" name="name" value={ user.name }/>
			<button type="submit">Delete</button>
		}
	}
}

css boxClassName() {
	border: 2px solid #4CAF50;
	border-radius: 10px;
	background-color: #f9f9f9;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
	padding: 20px;
}
