package gong

import "net/http"

templ Form(opts ...FormOption) {
	{{
		c := formConfig{
			method: http.MethodPost,
			swap:   SwapInnerHTML,
		}
		for _, opt := range opts {
			c = opt(c)
		}
	}}
	<form
		if c.method == http.MethodGet {
			hx-get
		}
		if c.method == http.MethodPost {
			hx-post
		}
		if c.method == http.MethodPatch {
			hx-patch
		}
		if c.method == http.MethodDelete {
			hx-delete
		}
		hx-swap={ c.swap }
		if c.target != "" {
			hx-target={ c.target }
		} else {
			hx-target={ "#" + ComponentID(ctx) }
		}
		if c.trigger != nil {
			hx-trigger={ *c.trigger }
		}
		hx-headers={ ActionHeaders(ctx, c.headers...) }
		if c.classes != nil {
			class={ c.classes }
		}
		{ c.attrs... }
	>
		{ children... }
	</form>
}

type formConfig struct {
	method  string
	swap    string
	target  string
	headers []string
	trigger *string
	attrs   templ.Attributes
	classes templ.CSSClasses
}

type FormOption func(formConfig) formConfig

func FormWithMethod(method string) FormOption {
	return func(c formConfig) formConfig {
		c.method = method
		return c
	}
}

func FormWithHeaders(headers ...string) FormOption {
	return func(c formConfig) formConfig {
		c.headers = headers
		return c
	}
}

func FormWithAttrs(attrs templ.Attributes) FormOption {
	return func(c formConfig) formConfig {
		c.attrs = attrs
		return c
	}
}

func FormWithSwap(swap string) FormOption {
	return func(c formConfig) formConfig {
		c.swap = swap
		return c
	}
}

func FormWithClasses(classes ...any) FormOption {
	return func(c formConfig) formConfig {
		c.classes = templ.Classes(classes...)
		return c
	}
}

func FormWithTarget(target string) FormOption {
	return func(c formConfig) formConfig {
		c.target = target
		return c
	}
}

func FormWithTrigger(trigger string) FormOption {
	return func(c formConfig) formConfig {
		c.trigger = &trigger
		return c
	}
}
