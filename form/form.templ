package form

import (
	"context"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong/hooks"
	"io"
	"net/http"
)

// Form represents an HTML form component with HTMX attributes.
// It provides a builder pattern for creating forms with various HTTP methods,
// target elements, CSS classes, and HTMX swap behaviors.
type Form struct {
	method  string
	swap    string
	trigger string
	attrs   templ.Attributes
}

// NewForm creates a new Form instance with default settings.
// By default, it uses POST method and no swap behavior.
func New(opts ...Option) Form {
	f := Form{
		method: http.MethodPost,
		swap:   gong.SwapNone,
	}
	for _, opt := range opts {
		f = opt(f)
	}
	return f
}

// Render writes the form's HTML representation to the provided writer.
// It handles the rendering of the form with all configured attributes.
// Returns an error if rendering fails.
func (form Form) Render(ctx context.Context, w io.Writer) error {
	return form.component().Render(ctx, w)
}

templ (form Form) component() {
	<form
		if form.method == http.MethodGet {
			hx-get
		}
		if form.method == http.MethodPost {
			hx-post
		}
		if form.method == http.MethodPatch {
			hx-patch
		}
		if form.method == http.MethodDelete {
			hx-delete
		}
		hx-swap={ form.swap }
		hx-trigger={ form.trigger }
		if form.swap != gong.SwapNone {
			hx-target={ "#" + hooks.ComponentID(ctx) }
		}
		hx-headers={ hooks.ActionHeaders(ctx) }
		{ form.attrs... }
	>
		{ children... }
	</form>
}

type Option func(Form) Form

func WithMethod(method string) Option {
	return func(f Form) Form {
		f.method = method
		return f
	}
}

func WithAttrs(attrs templ.Attributes) Option {
	return func(f Form) Form {
		f.attrs = attrs
		return f
	}
}

func WithSwap(swap string) Option {
	return func(f Form) Form {
		f.swap = swap
		return f
	}
}

func WithTrigger(trigger string) Option {
	return func(f Form) Form {
		f.trigger = trigger
		return f
	}
}
