package form

import (
	"context"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong/hooks"
	"io"
	"net/http"
)

// Form represents an HTML form component with HTMX attributes.
// It provides a builder pattern for creating forms with various HTTP methods,
// target elements, CSS classes, and HTMX swap behaviors.
type Form struct {
	method   string
	targetID string
	swap     string
	trigger  string
	attrs    templ.Attributes
}

// NewForm creates a new Form instance with default settings.
// By default, it uses POST method and no swap behavior.
func New() Form {
	return Form{
		method: http.MethodPost,
		swap:   gong.SwapNone,
	}
}

// WithMethod sets the HTTP method for the form submission.
// Valid methods include POST, PATCH, and DELETE.
// Returns the modified form for method chaining.
func (form Form) WithMethod(method string) Form {
	form.method = method
	return form
}

// WithCSSClass adds CSS classes to the form element.
// The classes will be applied to the rendered form.
// Returns the modified form for method chaining.
func (form Form) WithAttrs(attrs templ.Attributes) Form {
	form.attrs = attrs
	return form
}

// WithTargetID sets the target ID for the form submission.
// This is used to specify the element that will be updated after the form submission.
// Returns the modified form for method chaining.
func (form Form) WithTargetID(targetID string) Form {
	form.targetID = targetID
	return form
}

// WithSwap sets the HTMX swap behavior for the form submission.
// This determines how the response will be swapped into the DOM.
// Returns the modified form for method chaining.
func (form Form) WithSwap(swap string) Form {
	form.swap = swap
	return form
}

func (form Form) WithTrigger(trigger string) Form {
	form.trigger = trigger
	return form
}

// Render writes the form's HTML representation to the provided writer.
// It handles the rendering of the form with all configured attributes.
// Returns an error if rendering fails.
func (form Form) Render(ctx context.Context, w io.Writer) error {
	return form.component().Render(ctx, w)
}

templ (form Form) component() {
	<form
		if form.method == http.MethodGet {
			hx-get
		}
		if form.method == http.MethodPost {
			hx-post
		}
		if form.method == http.MethodPatch {
			hx-patch
		}
		if form.method == http.MethodDelete {
			hx-delete
		}
		hx-swap={ form.swap }
		hx-trigger={ form.trigger }
		if form.swap != gong.SwapNone {
			hx-target={ "#" + hooks.TargetID(ctx, form.targetID) }
		}
		hx-headers={ hooks.ActionHeaders(ctx) }
		{ form.attrs... }
	>
		{ children... }
	</form>
}
