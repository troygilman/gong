package gong

import (
	"context"
	"io"
	"strconv"
)

// NewOutlet creates a new Outlet instance.
// The outlet will automatically render child routes based on the current path.
templ Outlet(opts ...OutletOption) {
	{{
		c := outletConfig{}
		for _, opt := range opts {
			c = opt(c)
		}
	}}
	<div
		id={ OutletID(ctx) }
		if c.oob {
			hx-swap-oob={ SwapInnerHTML }
		}
		if c.classes != nil {
			class={ c.classes }
		}
		{ c.attrs... }
	>
		@templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			gCtx := getContext(ctx)
			if child := gCtx.Route.Child(gCtx.ChildRouteIndex); child != nil {
				gCtx.CurrentRouteID += strconv.Itoa(gCtx.ChildRouteIndex)
				gCtx.Depth++
				return render(ctx, gCtx, w, child)
			}
			return nil
		})
	</div>
}

// Outlet represents a container component that renders child routes.
// It serves as a dynamic content area where route components are rendered
// based on the current URL path. Outlets are essential for nested routing.
type outletConfig struct {
	oob     bool
	attrs   templ.Attributes
	classes templ.CSSClasses
}

type OutletOption func(outletConfig) outletConfig

func OutletWithAttrs(attrs templ.Attributes) OutletOption {
	return func(c outletConfig) outletConfig {
		c.attrs = attrs
		return c
	}
}

func outletWithOOB(oob bool) OutletOption {
	return func(c outletConfig) outletConfig {
		c.oob = oob
		return c
	}
}

func OutletWithClasses(classes ...any) OutletOption {
	return func(c outletConfig) outletConfig {
		c.classes = templ.Classes(classes...)
		return c
	}
}
