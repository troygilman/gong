package gong

import (
	"context"
	"io"
)

// Outlet represents a container component that renders child routes.
// It serves as a dynamic content area where route components are rendered
// based on the current URL path. Outlets are essential for nested routing.
type Outlet struct {
	class string
}

// NewOutlet creates a new Outlet instance.
// The outlet will automatically render child routes based on the current path.
func NewOutlet() Outlet {
	return Outlet{}
}

// WithClass adds a CSS class to the outlet element.
// This allows for custom styling of the outlet container.
// Returns the modified outlet for method chaining.
func (outlet Outlet) WithClass(class string) Outlet {
	outlet.class = class
	return outlet
}

// Render writes the outlet's HTML representation to the provided writer.
// It handles the rendering of the outlet and its child route components.
// Returns an error if rendering fails.
func (outlet Outlet) Render(ctx context.Context, w io.Writer) error {
	return outlet.component().Render(ctx, w)
}

templ (outlet Outlet) component() {
	<div id={ buildOutletID(ctx) } class={ "gong-outlet", outlet.class }>
		@RenderFunc(func(ctx context.Context, w io.Writer) error {
			gCtx := getContext(ctx)
			gCtx.id = ""
			if child := gCtx.route.Child(gCtx.path); child != nil {
				return render(ctx, gCtx, w, child)
			}
			return nil
		})
	</div>
}
