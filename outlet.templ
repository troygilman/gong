package gong

import (
	"context"
	"io"
)

// Outlet represents a container component that renders child routes.
// It serves as a dynamic content area where route components are rendered
// based on the current URL path. Outlets are essential for nested routing.
type Outlet struct {
	oob   bool
	route Route
}

// NewOutlet creates a new Outlet instance.
// The outlet will automatically render child routes based on the current path.
func NewOutlet() Outlet {
	return Outlet{}
}

func (outlet Outlet) withOOB(oob bool) Outlet {
	outlet.oob = oob
	return outlet
}

func (outlet Outlet) withRoute(route Route) Outlet {
	outlet.route = route
	return outlet
}

// Render writes the outlet's HTML representation to the provided writer.
// It handles the rendering of the outlet and its child route components.
// Returns an error if rendering fails.
func (outlet Outlet) Render(ctx context.Context, w io.Writer) error {
	if outlet.route == nil {
		gCtx := getContext(ctx)
		if child := getContext(ctx).route.Child(gCtx.path); child != nil {
			outlet.route = child
		}
	}
	return outlet.component().Render(ctx, w)
}

templ (outlet Outlet) component() {
	<div
		id={ buildOutletID(ctx) }
		if outlet.oob {
			hx-swap-oob="true"
		}
		class="gong-outlet"
	>
		if outlet.route != nil {
			@outlet.route
		}
	</div>
}
