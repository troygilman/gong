package outlet

import (
	"context"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong/hooks"
	"github.com/troygilman/gong/internal/gctx"
	"github.com/troygilman/gong/internal/util"
	"io"
	"strconv"
)

// Outlet represents a container component that renders child routes.
// It serves as a dynamic content area where route components are rendered
// based on the current URL path. Outlets are essential for nested routing.
type Outlet struct {
	oob   bool
	attrs templ.Attributes
}

// NewOutlet creates a new Outlet instance.
// The outlet will automatically render child routes based on the current path.
func New(opts ...Option) Outlet {
	outlet := Outlet{}
	for _, opt := range opts {
		outlet = opt(outlet)
	}
	return outlet
}

// Render writes the outlet's HTML representation to the provided writer.
// It handles the rendering of the outlet and its child route components.
// Returns an error if rendering fails.
func (outlet Outlet) Render(ctx context.Context, w io.Writer) error {
	return outlet.component().Render(ctx, w)
}

templ (outlet Outlet) component() {
	<div
		id={ hooks.OutletID(ctx) }
		if outlet.oob {
			hx-swap-oob={ gong.SwapInnerHTML }
		}
		{ outlet.attrs... }
	>
		@templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			gCtx := gctx.GetContext(ctx)
			if child := gCtx.Route.Child(gCtx.ChildRouteIndex); child != nil {
				gCtx.CurrentRouteID += strconv.Itoa(gCtx.ChildRouteIndex)
				gCtx.Depth++
				return util.Render(ctx, gCtx, w, child)
			}
			return nil
		})
	</div>
}

type Option func(Outlet) Outlet

func WithAttrs(attrs templ.Attributes) Option {
	return func(o Outlet) Outlet {
		o.attrs = attrs
		return o
	}
}

func WithOOB(oob bool) Option {
	return func(o Outlet) Outlet {
		o.oob = oob
		return o
	}
}
