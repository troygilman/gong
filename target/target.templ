package target

import (
	"context"
	"github.com/troygilman/gong"
	"github.com/troygilman/gong/hooks"
	"io"
)

// Target represents an HTMX-powered target component that can be updated dynamically.
// It provides a way to create elements that can be refreshed or modified
// through HTMX requests, with configurable triggers and styling.
type Target struct {
	id      string
	trigger string
	attrs   templ.Attributes
}

// NewTarget creates a new Target instance with default settings.
// By default, it has no trigger and will only update on explicit HTMX requests.
func New() Target {
	return Target{
		trigger: gong.TriggerNone,
	}
}

// WithID sets a custom ID for the target element.
// This ID is used to identify the element for HTMX targeting and updates.
// Returns the modified target for method chaining.
func (target Target) WithID(id string) Target {
	target.id = id
	return target
}

// WithTrigger sets the HTMX trigger for the target element.
// This determines when the target will automatically refresh its content.
// Returns the modified target for method chaining.
func (target Target) WithTrigger(trigger string) Target {
	target.trigger = trigger
	return target
}

// WithCSSClass adds CSS classes to the target element.
// This allows for custom styling of the target container.
// Returns the modified target for method chaining.
func (target Target) WithAttrs(attrs templ.Attributes) Target {
	target.attrs = attrs
	return target
}

// Render writes the target's HTML representation to the provided writer.
// It handles the rendering of the target with all configured HTMX attributes.
// Returns an error if rendering fails.
func (target Target) Render(ctx context.Context, w io.Writer) error {
	return target.component().Render(ctx, w)
}

templ (target Target) component() {
	<div
		id={ hooks.TargetID(ctx, target.id) }
		hx-get
		hx-swap={ gong.SwapInnerHTML }
		hx-trigger={ target.trigger }
		hx-target="this"
		hx-headers={ hooks.ActionHeaders(ctx) }
		{ target.attrs... }
	>
		{ children... }
	</div>
}
